#!/usr/bin/env mksh
# :vi sw=4 noet ts=4 :

#	Abstract:	Verify the environment is as expected (needed /var filesystems
#				are mounted), and if all is well start tokay. If /var/lib/tokay/tokay.cfg
#				exists, that configuration file is used. Otherwise the default file
#				(which is probably unusable because of rabbit passwords etc.) will
#				be used.
#
#				CAUTION: tokay's container is built on alpine's small footprint 
#				base which does NOT support a real ksh, so this script MUST be
#				compatable with what alpine uses for ksh (mksh most likely).
#
#	Date:		27 March 2018
#	Author:		E. Scott Daniels
# -------------------------------------------------------------------------------


# assuming the nice dt isn't there....
function dt {
	echo $(date +"%Y/%m/%d.%H:%M:%S")
}

function log_msg {
	echo "$(dt -p) $1"
}

# Ensure that a directory ($1) exists. If the file $1/MOUNTPT exists, we 
# assumed that a filesystem would be mounted on top of this, hiding MOUNTPT,
# thus if we see it we fail.  If -w is given, then we test to ensure the 
# directory is writable before confirming that it exists.
#
function ensured {
	typeset test_write=0
	while [[ $1 == -* ]]
	do
		case $1 in 
			-w) test_write=1;;
		esac
		shift
	done

	if [[ ! -d $1 ]]
	then
		log_msg "abort: not a directory: $1" 
		abort=1
		return
	fi

	if [[ -e $1/MOUNTPT ]]		# if we epected something mounted here, and it's not, fail
	then
		log_msg "abort: $1 was not mounted from an outside filesystem and must be"
		abort=1
		return
	fi

	if (( ! test_write ))
	then
		return
	fi

	if ! touch $1/foo >/dev/null 2>&1
	then
		log_msg "abort: cannot write to directory: $1" 
		abort=1
	else
		rm $1/foo
	fi
}

# Ensure that the requested file exists
#
function ensuref {
	if [[ ! -f $1 ]]
	then
		log_msg "abort: cannot find requrired file: $1" 
		abort=1
	fi
}

# ensure that at least one of the files listed exists
function ensure_one {
	for f in "$@"
	do
		if [[ -e $f ]]
		then
			return
		fi
	done

	log_msg "abort: require one of these files, found none: $@"
	abort=1
}

# ----------------------------------------------------------------------------------------------
abort=0

while [[ $1 == -* ]]
do
	case $1 in 
		*)	log_msg "unrecognised command line flag: $1" 
			exit 1
	esac

	shift
done

# sanity checks set abort to true. We'll report all problems then exit if needed
# ensure that all directories we expect are both there, and have something mounted
# on top of them (MOUNTPT file deposited during build is not visible).
ensured /var/lib
ensured -w /var/lib/vfd/config
ensured -w /var/lib/vfd/bin
ensured -w /var/lib/vfd/pipes
ensured -w /var/log/tokay
ensure_one /var/lib/tokay/tokay.cfg /playpen/config/tokay.cfg	# if they mounted without a config, cancel start

if (( abort ))					# some verification failed, bug out now
then
	exit 1
fi

log_dir=/var/log/tokay
exec 2>>$log_dir/start.log
echo "$(dt) starting..." >&2

if [[ -e /playpen/bin/iplex ]] 	# if we have a copy of iplex, put it in vfd/bin
then
	cp /playpen/bin/iplex /var/lib/vfd/bin/
fi

if [[ -e /var/lib/tokay/tokay.cfg ]]
then
	cfg_file="/var/lib/tokay/tokay.cfg"			# preferred as this guarentees the right info as user added it
else
	cfg_file="/playpen/config/tokay.cfg"		# this likely won't work, but might on our testing site
fi

log_msg "using config: $cfg_file"

# wait up to 5 minutes for VFd to start and create it's request pipe
tries=30
while [[ ! -e /var/lib/vfd/pipes/request ]]
do
	if [[ $tries -le 0 ]]
	then
		echo "$(dt) gave up waiting on /var/lib/vfd/pipes/request FIFO" >&2
		exit 1
	fi
	if [[ $tries -eq 30 ]]
	then
		echo "$(dt) waiting up to 5 minutes on /var/lib/vfd/pipes/request FIFO" >&2
	fi

	sleep 10
	tries=$(( tries - 1 ))
done


# at this point we are clear for take off...
if ! /playpen/bin/tokay -c $cfg_file >/var/log/tokay/tokay.std 2>&1
then
	cat /var/log/tokay/tokay.std
fi


